/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import Dialog.ReadDialog;
import Dialog.WriteDialog;
import NFC.Commands;
import java.awt.event.ItemEvent;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.ResponseAPDU;
import javax.smartcardio.TerminalFactory;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author minh
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private SwingWorker worker;
    private boolean isCardPresent;
    private List<CardTerminal> lists;
    private CardTerminal currTerminal;

    //private ReadDialog rd;
    //private WriteDialog wd;
    public MainFrame() {
        initComponents();
        RadiobuttonGroup.add(KeyARadioButton);
        RadiobuttonGroup.add(KeyBRadioButton);
        initReaderName();
        disableORenableAction();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RadiobuttonGroup = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ReaderListComboBox = new javax.swing.JComboBox<>();
        ConnectToggleButton = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        CardUIDTextField = new javax.swing.JTextField();
        CardTypeTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CardATRTextArea = new javax.swing.JTextArea();
        WriteCardButton = new javax.swing.JButton();
        ReadCardButton = new javax.swing.JButton();
        DumpCardDataButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PromptTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        KeyList = new javax.swing.JList<>();
        KeyBRadioButton = new javax.swing.JRadioButton();
        KeyARadioButton = new javax.swing.JRadioButton();
        MainMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Acr122u tool");
        setPreferredSize(new java.awt.Dimension(650, 630));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Reader"));

        jLabel2.setText("Reader's name");

        ReaderListComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A" }));
        ReaderListComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ReaderListComboBoxItemStateChanged(evt);
            }
        });

        ConnectToggleButton.setText("Connect");
        ConnectToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReaderListComboBox, 0, 332, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConnectToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ReaderListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectToggleButton))
                .addGap(0, 0, 0))
        );

        jPanel2.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Card"));

        jLabel3.setText("Card UID");

        jLabel1.setText("Card Type");

        CardUIDTextField.setEditable(false);

        CardTypeTextField.setEditable(false);

        jLabel4.setText("Full ATR");

        CardATRTextArea.setEditable(false);
        CardATRTextArea.setColumns(20);
        CardATRTextArea.setLineWrap(true);
        CardATRTextArea.setRows(5);
        CardATRTextArea.setAutoscrolls(false);
        jScrollPane1.setViewportView(CardATRTextArea);

        WriteCardButton.setText("Write");
        WriteCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WriteCardButtonActionPerformed(evt);
            }
        });

        ReadCardButton.setText("Read");
        ReadCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadCardButtonActionPerformed(evt);
            }
        });

        DumpCardDataButton.setText("Dump");
        DumpCardDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DumpCardDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CardTypeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CardUIDTextField, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(ReadCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WriteCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DumpCardDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CardUIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CardTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WriteCardButton)
                    .addComponent(ReadCardButton)
                    .addComponent(DumpCardDataButton)))
        );

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        PromptTextArea.setEditable(false);
        PromptTextArea.setColumns(20);
        PromptTextArea.setLineWrap(true);
        PromptTextArea.setRows(5);
        jScrollPane2.setViewportView(PromptTextArea);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Key list"));

        KeyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "default key" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        KeyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        KeyList.setSelectedIndex(0);
        jScrollPane4.setViewportView(KeyList);

        KeyBRadioButton.setSelected(true);
        KeyBRadioButton.setText("Key B");

        KeyARadioButton.setText("Key A");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KeyARadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(KeyBRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeyARadioButton)
                .addGap(0, 0, 0)
                .addComponent(KeyBRadioButton))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jMenu1.setText("File");
        MainMenuBar.add(jMenu1);

        jMenu2.setText("Edit");
        MainMenuBar.add(jMenu2);

        setJMenuBar(MainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReadCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadCardButtonActionPerformed
        // TODO add your handling code here:
        if (isCardPresent) {
            ReadDialog rd = new ReadDialog(this, rootPaneCheckingEnabled);
            rd.setLocationRelativeTo(this);
            rd.setEvent(() -> {
                ReadAndPrompt(Byte.parseByte(rd.getData()));
                rd.dispose();
            });
            rd.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please insert card first! Operation can not process", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ReadCardButtonActionPerformed

    private void WriteCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WriteCardButtonActionPerformed
        // TODO add your handling code here:
        if (isCardPresent) {
            WriteDialog wd = new WriteDialog(this, rootPaneCheckingEnabled);
            wd.setLocationRelativeTo(this);
            wd.setEvent(() -> {
                String[] temp = wd.getData().split(":");
                if (temp[1].length() < 16) {
                    int remain = 16 - temp[1].length();
                    while (remain-- > 0) {
                        temp[1] += " ";
                    }
                }
                WriteAndPrompt(Byte.parseByte(temp[0]), temp[1]);
                wd.dispose();
            });
            wd.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please insert card first! Operation can not process", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_WriteCardButtonActionPerformed
    private void ReadAndPrompt(byte blockNum) {
        try {
            Card card = currTerminal.connect("*");
            CardChannel chanel = card.getBasicChannel();
            ResponseAPDU loadres = chanel.transmit(Commands.getDefaultAuthenticationKeyCommand());
            if (loadres.getSW1() == 0x90) {
                if (KeyARadioButton.isSelected()) {
                    ResponseAPDU useAsKeyA = chanel.transmit(Commands.getAuthenticationWithKeyACommand(blockNum));
                    if (useAsKeyA.getSW1() == 0x90) {
                        ResponseAPDU data = chanel.transmit(Commands.getReadBlockCommand(blockNum));
                        if (data.getSW1() == 0x90) {
                            String t = "";
                            for (byte temp : data.getData()) {
                                t += String.format("%02x", temp) + " ";
                            }
                            PromptTextArea.append(">> block " + blockNum + " " + t + "\n");
                        } else {
                            PromptTextArea.append(">> reading data failed\n");
                        }
                    } else {
                        PromptTextArea.append(">> authenticated key failed\n");
                    }
                } else {
                    ResponseAPDU useAsKeyB = chanel.transmit(Commands.getAuthenticationWithKeyBCommand(blockNum));
                    if (useAsKeyB.getSW1() == 0x90) {
                        ResponseAPDU data = chanel.transmit(Commands.getReadBlockCommand(blockNum));
                        if (data.getSW1() == 0x90) {
                            String t = "";
                            for (byte temp : data.getData()) {
                                t += String.format("%02x", temp) + " ";
                            }
                            PromptTextArea.append(">> block " + blockNum + " " + t + "\n");
                        } else {
                            PromptTextArea.append(">> reading data failed\n");
                        }
                    } else {
                        PromptTextArea.append(">> authenticated key failed\n");
                    }
                }
            } else {
                PromptTextArea.append(">> load key failed\n");
            }
            //chanel.close();
            card.disconnect(false);
        } catch (CardException ex) {
            PromptTextArea.append("ERR : " + ex.getMessage() + "\n");
        }
    }

    private void WriteAndPrompt(byte blockNum, String data) {

        try {
            Card card = currTerminal.connect("*");
            CardChannel chanel = card.getBasicChannel();
            ResponseAPDU loadres = chanel.transmit(Commands.getDefaultAuthenticationKeyCommand());
            if (loadres.getSW1() == 0x90) {
                if (KeyARadioButton.isSelected()) {
                    ResponseAPDU useAsKeyA = chanel.transmit(Commands.getAuthenticationWithKeyACommand(blockNum));
                    if (useAsKeyA.getSW1() == 0x90) {
                        ResponseAPDU wRes = chanel.transmit(Commands.getWriteBlockCommand(blockNum, data.getBytes()));
                        if (wRes.getSW1() == 0x90) {
                            PromptTextArea.append(">> write successfully\n");
                        } else {
                            PromptTextArea.append(">> write fail\n");
                        }
                    } else {
                        PromptTextArea.append(">> authenticated key failed\n");
                    }
                } else {
                    ResponseAPDU useAsKeyB = chanel.transmit(Commands.getAuthenticationWithKeyBCommand(blockNum));
                    if (useAsKeyB.getSW1() == 0x90) {
                        ResponseAPDU wRes = chanel.transmit(Commands.getWriteBlockCommand(blockNum, data.getBytes()));
                        if (wRes.getSW1() == 0x90) {
                            PromptTextArea.append(">> write successfully\n");
                        } else {
                            PromptTextArea.append(">> write fail\n");
                        }
                    } else {
                        PromptTextArea.append(">> authenticated key failed\n");
                    }
                }
            } else {
                PromptTextArea.append(">> load key failed\n");
            }
            //chanel.close();
            card.disconnect(false);
        } catch (CardException ex) {
            PromptTextArea.append("ERR : " + ex.getMessage() + "\n");
        }
    }

    @SuppressWarnings("empty-statement")
    private void ConnectToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectToggleButtonActionPerformed
        // TODO add your handling code here:
        if (ConnectToggleButton.isSelected()) {
            ConnectToggleButton.setText("Disconnect");
            //initWorker();
            //worker.run();
            currTerminal = lists.get(ReaderListComboBox.getSelectedIndex());
            initWorker();
            worker.execute();
            disableORenableAction();
        } else {
            ConnectToggleButton.setText("Connect");

            isCardPresent = false;
            disableORenableAction();
        }
    }//GEN-LAST:event_ConnectToggleButtonActionPerformed

    private void ReaderListComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ReaderListComboBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            currTerminal = lists.get(ReaderListComboBox.getSelectedIndex());
        }
    }//GEN-LAST:event_ReaderListComboBoxItemStateChanged

    private void DumpCardDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DumpCardDataButtonActionPerformed
        // TODO add your handling code here:
        dumpData();
    }//GEN-LAST:event_DumpCardDataButtonActionPerformed
    private void dumpData() {
        try {
            Card card = currTerminal.connect("*");
            CardChannel chanel = card.getBasicChannel();
            ResponseAPDU loadres = chanel.transmit(Commands.getDefaultAuthenticationKeyCommand());
            if (loadres.getSW1() == 0x90) {
                if (KeyARadioButton.isSelected()) {
                    for (int i = 0; i < 16; i++) {
                        chanel.transmit(Commands.getAuthenticationWithKeyACommand((byte) i));
                        ResponseAPDU data = chanel.transmit(Commands.getReadBlockCommand((byte) i));
                        String t = "";
                        for (byte temp : data.getData()) {
                            t += String.format("%02x", temp) + " ";
                        }
                        PromptTextArea.append(">> block " + i + " " + t + "\n");
                    }
                } else {
                    for (int i = 0; i < 16; i++) {
                        chanel.transmit(Commands.getAuthenticationWithKeyACommand((byte) i));
                        ResponseAPDU data = chanel.transmit(Commands.getReadBlockCommand((byte) i));
                        String t = "";
                        for (byte temp : data.getData()) {
                            t += String.format("%02x", temp) + " ";
                        }
                        PromptTextArea.append(">> block " + i + " " + t + "\n");
                    }
                }
            } else {
                PromptTextArea.append(">> load key failed\n");
            }
            //chanel.close();
            card.disconnect(false);
        } catch (CardException ex) {
            PromptTextArea.append("ERR : " + ex.getMessage() + "\n");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CardATRTextArea;
    private javax.swing.JTextField CardTypeTextField;
    private javax.swing.JTextField CardUIDTextField;
    private javax.swing.JToggleButton ConnectToggleButton;
    private javax.swing.JButton DumpCardDataButton;
    private javax.swing.JRadioButton KeyARadioButton;
    private javax.swing.JRadioButton KeyBRadioButton;
    private javax.swing.JList<String> KeyList;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JTextArea PromptTextArea;
    private javax.swing.ButtonGroup RadiobuttonGroup;
    private javax.swing.JButton ReadCardButton;
    private javax.swing.JComboBox<String> ReaderListComboBox;
    private javax.swing.JButton WriteCardButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    private void initReaderName() {
        try {
            lists = TerminalFactory.getDefault().terminals().list();
        } catch (CardException ex) {
            ConnectToggleButton.setEnabled(false);
            PromptTextArea.append("ERR : " + ex.getMessage() + "\n");
        }
        if (lists != null) {
            ReaderListComboBox.removeAllItems();
            lists.forEach((temp) -> {
                ReaderListComboBox.addItem(temp.getName());
            });
        } else {
            PromptTextArea.append(">> : no reader available\n");
        }

    }

    private void initWorker() {
        worker = null;
        worker = new SwingWorker() {
            @Override
            protected Object doInBackground() {
                String error = "";
                while (ConnectToggleButton.isSelected()) {
                    try {
                        if (currTerminal.isCardPresent()) {
                            publish(true);
                        } else {
                            publish(false);
                        }
                        Thread.sleep(500);
                    } catch (CardException ex) {
                        error = ex.getMessage();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                return error;
            }

            @Override
            protected void done() {
                try {
                    String error = (String) get();
                } catch (InterruptedException | ExecutionException ex) {
                    PromptTextArea.append("ERR : " + ex.getMessage() + "\n");
                }
            }

            @Override
            protected void process(List chunks) {
                boolean val = (boolean) chunks.get(chunks.size() - 1);
                if (isCardPresent != val) {
                    isCardPresent = val;
                    if (val) {
                        showATR();
                    } else {
                        clearATR();
                    }
                }
            }

        };
        //worker.run();
    }

    private void showATR() {
        try {
            Card card = currTerminal.connect("*");
            byte[] atr = card.getATR().getBytes();
            for (byte a : atr) {
                CardATRTextArea.append(String.format("%02x", a) + " ");
            }
            CardTypeTextField.setText(Commands.getCardType(atr));
            CardChannel channel = card.getBasicChannel();
            ResponseAPDU response = channel.transmit(Commands.getUIDCommand());
            if (response.getSW1() == 0x90 && response.getSW2() == 0x00) {
                String UID = "";
                for (byte a : response.getData()) {
                    UID += String.format("%02x", a) + " ";
                }
                CardUIDTextField.setText(UID);
                PromptTextArea.append(">> Operation successed\n");
            } else if (response.getSW1() == 0x63 && response.getSW2() == 0x00) {
                PromptTextArea.append(">> Operation failed\n");
            } else {
                PromptTextArea.append(">> Operation unavailable\n");
            }
            card.disconnect(false);
        } catch (CardException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearATR() {
        CardATRTextArea.setText("");
        CardTypeTextField.setText("");
        CardUIDTextField.setText("");
    }

    private void disableORenableAction() {
        //FormatCardButton.setEnabled(ConnectToggleButton.isSelected());
        //ClearCardButton.setEnabled(ConnectToggleButton.isSelected());
        ReadCardButton.setEnabled(ConnectToggleButton.isSelected());
        WriteCardButton.setEnabled(ConnectToggleButton.isSelected());
        DumpCardDataButton.setEnabled(ConnectToggleButton.isSelected());
        ReaderListComboBox.setEditable(!ConnectToggleButton.isSelected());
    }

}
